package CyrilEnzoI.TP1_ASI;

import javax.jms.*;
import org.apache.activemq.ActiveMQConnectionFactory;
import org.springframework.stereotype.Component;

/**
 * Classe permettant de dÃ©montrer le modÃ¨le Publish-Subscribe avec un Topic JMS.
 *
 * - Deux consommateurs s'abonnent Ã  un Topic.
 * - Un producteur envoie un message sur ce Topic.
 * - Tous les consommateurs abonnÃ©s reÃ§oivent le message.
 */
@Component
public class JmsTopicExample {

    private final ConnectionFactory connectionFactory;

    /**
     * Constructeur qui initialise la connexion avec ActiveMQ via TCP.
     */
    public JmsTopicExample() {
        this.connectionFactory = new ActiveMQConnectionFactory("tcp://localhost:61616");
    }

    /**
     * MÃ©thode qui :
     * - CrÃ©e un Topic JMS.
     * - Ajoute deux consommateurs abonnÃ©s au Topic.
     * - Publie un message vers le Topic.
     * - Tous les consommateurs abonnÃ©s reÃ§oivent le message.
     *
     * @throws Exception en cas de problÃ¨me de connexion ou de gestion JMS.
     */
    public void processTopic() throws Exception {
        Connection connection = null;
        Session session = null;
        try {
            // ðŸ”¹ CrÃ©ation de la connexion JMS
            connection = connectionFactory.createConnection();

            // ðŸ”¹ CrÃ©ation d'une session JMS (sans transaction, avec confirmation automatique des messages)
            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

            // ðŸ”¹ CrÃ©ation du Topic nommÃ© "customerTopic"
            Topic topic = session.createTopic("customerTopic");

            // ðŸ”¹ CrÃ©ation des consommateurs abonnÃ©s au Topic
            MessageConsumer consumer1 = session.createConsumer(topic);
            MessageConsumer consumer2 = session.createConsumer(topic);

            // ðŸ”¹ DÃ©finition des comportements des consommateurs lors de la rÃ©ception d'un message
            consumer1.setMessageListener(new MessageListener() {
                @Override
                public void onMessage(Message message) {
                    try {
                        System.out.println("ðŸŽ§ Consumer1 a reÃ§u : " + ((TextMessage) message).getText());
                    } catch (JMSException e) {
                        e.printStackTrace();
                    }
                }
            });

            consumer2.setMessageListener(new MessageListener() {
                @Override
                public void onMessage(Message message) {
                    try {
                        System.out.println("ðŸŽ§ Consumer2 a reÃ§u : " + ((TextMessage) message).getText());
                    } catch (JMSException e) {
                        e.printStackTrace();
                    }
                }
            });

            // ðŸ”¹ DÃ©marrer la connexion pour activer la rÃ©ception des messages par les consommateurs
            connection.start();
            System.out.println("âœ… Les consommateurs sont prÃªts Ã  recevoir des messages du topic.");

            // ðŸ”¹ CrÃ©ation d'un producteur de messages
            MessageProducer producer = session.createProducer(topic);

            // ðŸ”¹ CrÃ©ation et envoi d'un message textuel vers le Topic
            String payload = "Message important Ã  diffuser";
            Message message = session.createTextMessage(payload);
            System.out.println("ðŸ“¢ Envoi du message : '" + payload + "' vers le topic");
            producer.send(message);

            // ðŸ”¹ Pause de 3 secondes pour laisser le temps aux consommateurs de recevoir le message
            Thread.sleep(3000);

        } finally {
            // ðŸ”¹ Fermeture propre de la session et de la connexion
            if (session != null) session.close();
            if (connection != null) connection.close();
        }
    }
}
